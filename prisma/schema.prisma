generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  clerkUserId      String            @unique
  email            String            @unique
  name             String?
  imageUrl         String?
  industry         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bio              String?
  skills           String[]
  experience       Int?
  assessments      Assessment[]
  coverletter      CoverLetter[]
  resume           Resume?
  industryInsights IndustryInsights? @relation(fields: [industry], references: [industry])
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  questions      Json[]
  quizScore      Float
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}


model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}
model IndustryInsights {
  id                String   @id @default(cuid())
  industry          String   @unique
  topSkills         String[]
  keyTrends         String[]
  recommendedSkills String[]
  nextUpdate        DateTime
  growthRate        Float
  salaryRanges      Json[]
  lastUpdated       DateTime @default(now())
  demandLevel       String
  marketOutlook     String
  users             User[]

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
